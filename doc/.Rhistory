}
AG[[1]][[3]]
for (i in 1:length(AG)){
for (j in 1:length(AG[[i]])){
AG_df[i,j] <- AG[[i]][[j]]
}
}
View(AG_df)
length(list1)
list1 <- data_list[[1]]
length(list1)
?lapply
list1[[1]]
list1[[1]][5]
load("C:/Users/Lloyd/Documents/GitHub/Spr2017-proj4-team-11/data/profclean.RData")
load("../data/profclean.RData")
length(list1)
list1 <- data_list[[1]]
length(list1)
list1 <- data_list[[1]]
num_t1 <- 200
for (i in 1:length(list1)) {
list1[[i]][6] <- sample(1:2, 577, prob = c(200/577, 377/577), replace = TRUE)
}
warnings()
list1[[577]]
data_list[[1]]
data_list[[1]][[1]][1]
data_list[[1]][[1]][[1]]
data_list[[1]][[1]][[3]]
data_list[[1]][[1]][3
]
str(data_list[[1]][[1]][3])
str(data_list[[1]][[1]][1])
getcol <- function(datalist, listNum, colNum) {
col <- rep(NA)
for (i in 1:length(datalist[[listNum]])) {
col[i] <- unlist(datalist[[listNum]][[colNum]][[i]])
}
}
getcol(data_list, 1, 1)
data_list[[1]][[1]][1]
unlist(data_list[[1]][[1]][1])
str(unlist(data_list[[1]][[1]][1]))
getcol <- function(datalist, listNum, colNum) {
col <- rep(NA)
for (i in 1:length(datalist[[listNum]])) {
col[i] <- unlist(datalist[[listNum]][[colNum]][[i]])
}
return(col)
}
getcol(data_list, 1, 1)
col <- rep(NA)
for (i in 1:length(datalist[[1]])) {
col[i] <- unlist(datalist[[1]][[1]][[i]])
}
col <- rep(NA)
for (i in 1:length(data_list[[1]])) {
col[i] <- unlist(data_list[[1]][[1]][[i]])
}
data_list[[1]][[1]][[1]]
data_list[[1]][[1]][[2]]
getcol <- function(datalist = data_list, listNum, colNum) {
col <- rep(NA)
for (i in 1:length(datalist[[listNum]])) {
col[i] <- unlist(datalist[[listNum]][[i]][[colNum]])
}
return(col)
}
getcol(1,1)
data_list[[1]][[2]][[1]]
data_list[[1]][[3]][[1]]
data_list[[1]][[11]][[1]]
data_list[[1]][[12]][[1]]
col <- rep(NA)
for (i in 1:length(data_list[[listNum]])) {
col[i] <- unlist(data_list[[listNum]][[i]][[colNum]])
}
col <- rep(NA)
for (i in 1:length(data_list[[1]])) {
col[i] <- unlist(data_list[[1]][[i]][[1]])
}
getcol <- function(data_list = data_list, listNum, colNum) {
col <- rep(NA)
for (i in 1:length(data_list[[listNum]])) {
col[i] <- unlist(data_list[[listNum]][[i]][[colNum]])
}
return(col)
}
getcol(1, 1)
getcol(listNum = 1, colNum = 1)
getcol(data_list, listNum = 1, colNum = 1)
getcol <- function(datalist, listNum, colNum) {
col <- rep(NA)
for (i in 1:length(datalist[[listNum]])) {
col[i] <- unlist(datalist[[listNum]][[i]][[colNum]])
}
return(col)
}
head(getcol(data_list,1,1))
head(getcol(data_list,1,2))
head(getcol(data_list,1,3))
datalist[[1]][[i]][[3]]
data_list[[1]][[i]][[3]]
data_list[[1]][[1]][[3]]
str(data_list[[1]][[1]][[3]])
head(getcol(data_list, 1, 4))
head(getcol(data_list, 1, 5))
getcolaslist <- function(datalist, listNum, colNum) {
col <- list(NA)
for (i in 1:length(datalist[[listNum]])) {
col[i] <- datalist[[listNum]][[i]][[colNum]]
}
return(col)
}
getcolaslist(data_list, 1, 3)
getcolaslist <- function(datalist, listNum, colNum) {
col <- list(NA)
for (i in 1:length(datalist[[listNum]])) {
col[[i]] <- datalist[[listNum]][[i]][[colNum]]
}
return(col)
}
getcolaslist(data_list, 1, 3)
getcolasvec <- function(data_list, listNum, colNum) {
col <- rep(NA)
for (i in 1:length(data_list[[listNum]])) {
col[i] <- unlist(data_list[[listNum]][[i]][[colNum]])
}
return(col)
}
getcolasvec <- function(data_list, listNum, colNum) {
col <- rep(NA)
for (i in 1:length(data_list[[listNum]])) {
col[i] <- unlist(data_list[[listNum]][[i]][[colNum]])
}
return(col)
}
getcolasvec <- function(data = data_list, listNum, colNum) {
col <- rep(NA)
for (i in 1:length(data[[listNum]])) {
col[i] <- unlist(data[[listNum]][[i]][[colNum]])
}
return(col)
}
head(getcolasvec(data_list,1,1))
head(getcolasvec(1,1))
getcolasvec <- function(data, listNum, colNum) {
col <- rep(NA)
for (i in 1:length(data[[listNum]])) {
col[i] <- unlist(data[[listNum]][[i]][[colNum]])
}
return(col)
}
getcolaslist <- function(data, listNum, colNum) {
col <- list(NA)
for (i in 1:length(data[[listNum]])) {
col[[i]] <- data[[listNum]][[i]][[colNum]]
}
return(col)
}
getdf <- function(data, listNum){
col1 <- getcolasvec(data_list, listNum, 1)
col2 <- getcolasvec(data_list, listNum, 2)
col4 <- getcolasvec(data_list, listNum, 4)
col5 <- getcolasvec(data_list, listNum, 5)
col3 <- getcolaslist(data_list, listNum, 3)
df <- data.frame(authorNum = col1, paperNum = col2, coauthor = col3, paperTitle = col4, journalTitle = col5)
return(df)
}
testdf <- getdf(data_list, 1)
col1 <- getcolasvec(data_list, listNum, 1)
col2 <- getcolasvec(data_list, listNum, 2)
col4 <- getcolasvec(data_list, listNum, 4)
col5 <- getcolasvec(data_list, listNum, 5)
col3 <- getcolaslist(data_list, listNum, 3)
col1 <- getcolasvec(data_list, 1, 1)
col2 <- getcolasvec(data_list, 1, 2)
col4 <- getcolasvec(data_list, 1, 4)
col5 <- getcolasvec(data_list, 1, 5)
col3 <- getcolaslist(data_list, 1, 3)
testdf <- data.frame(authorNum = col1, paperNum = col2, coauthor = col3, paperTitle = col4, journalTitle = col5)
testdf <- data.frame(authorNum = col1, paperNum = col2, paperTitle = col4, journalTitle = col5)
testdf$coauthor <- col3
View(testdf)
str(testdf[,3])
str(testdf[,5])
testdf[,3] <- as.character(testdf[,3])
str(testdf[,3])
testdf[1,3]
str(testdf[1,3])
rm(list = ls())
load("../data/profclean.RData")
# Use AGupta as an example, simulate a partition T
# by randomly putting 200 observations into cluster 1 and the other 377 into cluster 2
# Cluster assignment is appended as the 6th element in each observation, taking value 1 or 2
getcolasvec <- function(data, listNum, colNum) {
col <- rep(NA)
for (i in 1:length(data[[listNum]])) {
col[i] <- unlist(data[[listNum]][[i]][[colNum]])
}
return(col)
}
getcolaslist <- function(data, listNum, colNum) {
col <- list(NA)
for (i in 1:length(data[[listNum]])) {
col[[i]] <- data[[listNum]][[i]][[colNum]]
}
return(col)
}
getdf <- function(data, listNum){
col1 <- getcolasvec(data_list, listNum, 1)
col2 <- getcolasvec(data_list, listNum, 2)
col4 <- getcolasvec(data_list, listNum, 4)
col5 <- getcolasvec(data_list, listNum, 5)
col3 <- getcolaslist(data_list, listNum, 3)
df <- data.frame(authorNum = col1, paperNum = col2, paperTitle = col4, journalTitle = col5)
df$coauthor <- col3
df[,3] <- as.character(df[,3])
df[,4] <- as.character(df[,4])
return(df)
}
AGupta <- getdf(data_list,1)
View(AGupta)
data <- list(NA)
for (i in 1:14) {
data[[i]] <- getdf(data_list, i)
}
testdf <- data[[1]]
View(testdf)
save(data)
save(data, file = "../data/data.RData")
load("C:/Users/Brown/Documents/GitHub/Spr2017-proj4-team-11/data/data.RData")
load("../data/data.RData")
AGupta <- data[[1]]
AGupta$t <- sample(1:2, prob = c(200/577, 377/577), replace = TRUE)
View(AGupta)
AGupta$t <- (1:2, 577, prob = c(200/577, 377/577), replace = TRUE)
AGupta$t <- sample(1:2, 577, prob = c(200/577, 377/577), replace = TRUE)
View(AGupta)
bigram_score <- rep(0, length(unique(df$t)))
df <- data[[1]]
bigram_score <- rep(0, length(unique(df$t)))
df_t <- df[df$t == 1, ]
title_list <- list(NA)
index <- 1:(nrow(df_t)-1)
title_list[[1]] <- strsplit(df_t[1, 3], split = " ")
temp_vec <- unlist(title_list[[i]])
title_list[[i]] <- temp_vec[temp_vec != ""
& temp_vec != "a"
& temp_vec != "an"
& temp_vec != "and"
& temp_vec != "or"
& temp_vec != "for"
& temp_vec != "to"
& temp_vec != "of"
& temp_vec != "the"
& temp_vec != "in"
& temp_vec != "what"
& temp_vec != "how"
& temp_vec != "why"]
temp_vec <- unlist(title_list[[1]])
title_list[[1]] <- temp_vec[temp_vec != ""
& temp_vec != "a"
& temp_vec != "an"
& temp_vec != "and"
& temp_vec != "or"
& temp_vec != "for"
& temp_vec != "to"
& temp_vec != "of"
& temp_vec != "the"
& temp_vec != "in"
& temp_vec != "what"
& temp_vec != "how"
& temp_vec != "why"]
title_list[[1]] <- strsplit(df_t[1, 3], split = " ")
View(df_t)
View(df)
df <- data[[1]]
df$t <- sample(1:2, 577, prob = c(200/577, 377/577), replace = TRUE)
bigram_score <- rep(0, length(unique(df$t)))
df_t <- df[df$t == 1, ]
title_list <- list(NA)
index <- 1:(nrow(df_t)-1)
title_list[[1]] <- strsplit(df_t[1, 3], split = " ")
title_list[[1]] <- tolower(title_list[[1]])
title_list[[1]]
str(title_list[[1]])
title_list[[1]] <- strsplit(df_t[1, 3], split = " ")
str(title_list[[1]])
title_list[[1]] <- tolower(unlist(title_list[[1]]))
title_list[[1]]
temp_vec <- unlist(title_list[[i]])
temp_vec <- unlist(title_list[[1]])
title_list[[i]] <- temp_vec[temp_vec != ""
& temp_vec != "a"
& temp_vec != "an"
& temp_vec != "and"
& temp_vec != "or"
& temp_vec != "for"
& temp_vec != "to"
& temp_vec != "of"
& temp_vec != "the"
& temp_vec != "in"
& temp_vec != "what"
& temp_vec != "how"
& temp_vec != "why"]
title_list[[1]] <- temp_vec[temp_vec != ""
& temp_vec != "a"
& temp_vec != "an"
& temp_vec != "and"
& temp_vec != "or"
& temp_vec != "for"
& temp_vec != "to"
& temp_vec != "of"
& temp_vec != "the"
& temp_vec != "in"
& temp_vec != "what"
& temp_vec != "how"
& temp_vec != "why"]
View(df_t)
title_list[[i]] <- strsplit(df_t[i, 3], split = " ")
title_list[[i]] <- tolower(unlist(title_list[[i]]))
title_list[[i]] <- str_replace_all(title_list[[i]],"[[:punct:]]","")
title_list[[1]] <- strsplit(df_t[1, 3], split = " ")
title_list[[1]] <- tolower(unlist(title_list[[1]]))
title_list[[1]] <- str_replace_all(title_list[[1]],"[[:punct:]]","")
library(stringr)
title_list[[1]] <- strsplit(df_t[1, 3], split = " ")
title_list[[1]] <- tolower(unlist(title_list[[1]]))
title_list[[1]] <- str_replace_all(title_list[[1]],"[[:punct:]]","")
temp_vec <- unlist(title_list[[1]])
title_list[[1]] <- temp_vec[temp_vec != ""
& temp_vec != "a"
& temp_vec != "an"
& temp_vec != "and"
& temp_vec != "or"
& temp_vec != "for"
& temp_vec != "to"
& temp_vec != "of"
& temp_vec != "the"
& temp_vec != "in"
& temp_vec != "what"
& temp_vec != "how"
& temp_vec != "why"]
View(df)
f_coauthor <- function (df) {
coauthor_score <- rep(0, length(unique(df$t)))
for (j in sort(unique(df$t)) ) {
df_t <- df[df$t == j, ]
coauthor_list <- list(NA)
for (i in 1:nrow(df_t)) {
coauthor_list[[i]] <- df_t[i,5]
coauthor_list[[i]] <- coauthor_list[[i]][coauthor_list[[i]] != "NA"]
}
coauthor_list <- coauthor_list[lapply(coauthor_list,length) > 0]
index <- 1:(length(coauthor_list)-1)
for (m in index) {
for (n in index[-(1:m)]) {
for (a in 1:length(unlist(coauthor_list[[m]])) ) {
for (b in 1:length(unlist(coauthor_list[[n]])) ) {
coauthor_score[j] <- ifelse(coauthor_list[[m]][a] == coauthor_list[[n]][b],
coauthor_score[j]+1, coauthor_score[j])
}
}
}
}
}
return(coauthor_score)
}
f_coauthor(df)
coauthor_score <- rep(0, length(unique(df$t)))
df_t <- df[df$t == 1, ]
coauthor_list <- list(NA)
for (i in 1:nrow(df_t)) {
coauthor_list[[i]] <- df_t[i,5]
coauthor_list[[i]] <- coauthor_list[[i]][coauthor_list[[i]] != "NA"]
}
coauthor_list <- coauthor_list[lapply(coauthor_list,length) > 0]
index <- 1:(length(coauthor_list)-1)
length(unlist(coauthor_list[[1]]))
length(unlist(coauthor_list[[1]][8]))
coauthor_list[[1]][8]
coauthor_list[[1]][[8]]
coauthor_list[[1]][1]
coauthor_list[[1]][2]
coauthor_list[[1]] <- unlist(df_t[1,5])
for (i in 1:nrow(df_t)) {
coauthor_list[[i]] <- unlist(df_t[i,5])
coauthor_list[[i]] <- coauthor_list[[i]][coauthor_list[[i]] != "NA"]
}
coauthor_list <- coauthor_list[lapply(coauthor_list,length) > 0]
f_coauthor <- function (df) {
coauthor_score <- rep(0, length(unique(df$t)))
for (j in sort(unique(df$t)) ) {
df_t <- df[df$t == j, ]
coauthor_list <- list(NA)
for (i in 1:nrow(df_t)) {
coauthor_list[[i]] <- unlist(df_t[i,5])
coauthor_list[[i]] <- coauthor_list[[i]][coauthor_list[[i]] != "NA"]
}
coauthor_list <- coauthor_list[lapply(coauthor_list,length) > 0]
index <- 1:(length(coauthor_list)-1)
for (m in index) {
for (n in index[-(1:m)]) {
for (a in 1:length(unlist(coauthor_list[[m]])) ) {
for (b in 1:length(unlist(coauthor_list[[n]])) ) {
coauthor_score[j] <- ifelse(coauthor_list[[m]][a] == coauthor_list[[n]][b],
coauthor_score[j]+1, coauthor_score[j])
}
}
}
}
}
return(coauthor_score)
}
f_coauthor(df)
f_bigram <- function(df){
bigram_score <- rep(0, length(unique(df$t)))
for (j in sort(unique(df$t)) ) {
df_t <- df[df$t == j, ]
title_list <- list(NA)
for (i in 1:nrow(df_t)) {
title_list[[i]] <- strsplit(df_t[i, 3], split = " ")
title_list[[i]] <- tolower(unlist(title_list[[i]]))
title_list[[i]] <- str_replace_all(title_list[[i]],"[[:punct:]]","")
temp_vec <- unlist(title_list[[i]])
title_list[[i]] <- temp_vec[temp_vec != ""
& temp_vec != "a"
& temp_vec != "an"
& temp_vec != "and"
& temp_vec != "or"
& temp_vec != "for"
& temp_vec != "to"
& temp_vec != "of"
& temp_vec != "the"
& temp_vec != "in"
& temp_vec != "what"
& temp_vec != "how"
& temp_vec != "why"]
}
index <- 1:(nrow(df_t)-1)
for (m in index) {
for (n in index[-(1:m)]) {
for (a in 1:(length(unlist(title_list[[m]]))-1) ) {
for (b in 1:(length(unlist(title_list[[n]]))-1) ) {
if (paste(title_list[[m]][a], title_list[[m]][a+1], sep = "") == paste(title_list[[n]][b], title_list[[n]][b+1], sep = "")) {
if ( (a-1)==0 | (b-1)==0 ) {
bigram_score[j] <- bigram_score[j]+1
} else if ( title_list[[m]][a-1] != title_list[[n]][b-1] ) {
bigram_score[j] <- bigram_score[j]+1
} else {
bigram_score[j] <- bigram_score[j]
}
}
}
}
}
}
}
return(bigram_score)
}
f_bigram(df)
df <- data[[1]]
t <- sample(1:2, 577, prob = c(200/577, 377/577), replace = TRUE)
f_bigram <- function(df, t){
df$t <- t
bigram_score <- rep(0, length(unique(df$t)))
for (j in sort(unique(df$t)) ) {
df_t <- df[df$t == j, ]
title_list <- list(NA)
for (i in 1:nrow(df_t)) {
title_list[[i]] <- strsplit(df_t[i, 3], split = " ")
title_list[[i]] <- tolower(unlist(title_list[[i]]))
title_list[[i]] <- str_replace_all(title_list[[i]],"[[:punct:]]","")
temp_vec <- unlist(title_list[[i]])
title_list[[i]] <- temp_vec[temp_vec != ""
& temp_vec != "a"
& temp_vec != "an"
& temp_vec != "and"
& temp_vec != "or"
& temp_vec != "for"
& temp_vec != "to"
& temp_vec != "of"
& temp_vec != "the"
& temp_vec != "in"
& temp_vec != "what"
& temp_vec != "how"
& temp_vec != "why"]
}
index <- 1:(nrow(df_t)-1)
for (m in index) {
for (n in index[-(1:m)]) {
for (a in 1:(length(unlist(title_list[[m]]))-1) ) {
for (b in 1:(length(unlist(title_list[[n]]))-1) ) {
if (paste(title_list[[m]][a], title_list[[m]][a+1], sep = "") == paste(title_list[[n]][b], title_list[[n]][b+1], sep = "")) {
if ( (a-1)==0 | (b-1)==0 ) {
bigram_score[j] <- bigram_score[j]+1
} else if ( title_list[[m]][a-1] != title_list[[n]][b-1] ) {
bigram_score[j] <- bigram_score[j]+1
} else {
bigram_score[j] <- bigram_score[j]
}
}
}
}
}
}
}
return(bigram_score)
}
f_bigram(df, t)
